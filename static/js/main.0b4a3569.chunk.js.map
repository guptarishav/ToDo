{"version":3,"sources":["ToDolist.jsx","App.js","serviceWorker.js","index.js"],"names":["ToDolist","props","className","onClick","onSelect","id","text","App","useState","inputlist","setinputlist","Items","setItems","deleteItems","olditems","filter","arrEle","index","type","placeholder","onChange","event","target","value","map","itemval","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qLAoBeA,G,YAfA,SAACC,GAEZ,OACI,oCACA,yBAAKC,UAAU,SACf,4BAAQC,QAAU,WAAOF,EAAMG,SAASH,EAAMI,MAA9C,KACC,wBAAIA,GAAG,OAAOJ,EAAMK,UCuDdC,EA3DH,WAAM,IAAD,EACeC,mBAAS,IADxB,mBACTC,EADS,KACCC,EADD,OAEQF,mBAAS,IAFjB,mBAETG,EAFS,KAEFC,EAFE,KAeTC,EAAa,SAACR,GAClBO,GAAS,SAACE,GACR,OAAOA,EAASC,QAAO,SAACC,EAAOC,GAC7B,OAAOA,IAAUZ,SAMvB,OACE,oCACA,yBAAKH,UAAU,YACb,yBAAKA,UAAU,cACf,6BACA,0CACA,6BACA,2BAAOgB,KAAK,OAAOC,YAAY,YAAYd,GAAG,QAAQe,SA3BxC,SAACC,GACjBX,EAAaW,EAAMC,OAAOC,QA0BmDA,MAAOd,IAClF,4BAAQJ,GAAG,aAAaF,QAxBV,WAChBS,GAAS,SAACE,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAoBL,OAEtBC,EAAa,MAoBX,OAIA,wBAAIR,UAAU,MACXS,EAAMa,KAAI,SAACC,EAAQR,GAClB,OAAQ,kBAAC,EAAD,CAAUS,IAAKT,EAAOX,KAAMmB,EAASpB,GAAIY,EAC/Cb,SAAUS,YClCFc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,kBAAC,EAAD,MAKEC,SAASC,eAAe,SDiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0b4a3569.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from './Button'\r\n\r\n\r\n\r\nconst ToDolist=(props)=>{\r\n \r\n    return(\r\n        <>\r\n        <div className=\"to_do\">\r\n        <button onClick={ () => {props.onSelect(props.id)}}>X</button> \r\n         <li id=\"li1\">{props.text}</li>\r\n         </div>\r\n\r\n        </>\r\n    )\r\n\r\n};\r\n\r\n\r\nexport default ToDolist;","import React, { useState } from 'react';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport ToDolist from './ToDolist';\n\n\n\nconst App = () =>{\n  const[inputlist,setinputlist]=useState(\"\");\n  const[Items, setItems]=useState([]);\n\n  const itemEvent = (event) =>{\n    setinputlist(event.target.value);\n\n  };\n  const listofItem =()=>{\n    setItems((olditems)=>{\n      return [...olditems,inputlist]\n    })\n    setinputlist('');\n\n  };\n  const deleteItems =(id)=>{\n    setItems((olditems)=>{\n      return olditems.filter((arrEle,index)=>{\n        return index !== id;\n      });\n    });\n\n  };\n  \n  return(\n    <>\n    <div className='main_div'>\n      <div className='center_div'>\n      <br />\n      <h1 >TO DO LIST</h1>\n      <br/>\n      <input type=\"text\" placeholder=\"Add Items\" id=\"input\" onChange={itemEvent} value={inputlist}/>\n      <button id=\"add_button\" onClick={listofItem}> + </button>\n\n\n\n      <ol className=\"ol\">\n        {Items.map((itemval,index) => {\n          return( <ToDolist key={index} text={itemval} id={index}\n            onSelect={deleteItems}\n          />)\n          \n\n        })\n        }\n      </ol>\n      </div>\n    </div>\n  \n    \n    \n\n    </>\n  )\n\n\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\n \n\n\nReactDOM.render(\n  <App/>\n  \n\n\n\n  , document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}